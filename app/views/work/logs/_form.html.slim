/ LOCALS:
/ copy_presenter [Work::Services::Logs::Copy, nil] Optional
/ work_log [Work::Log] Required

ruby:
  copy_presenter = nil if !local_assigns.key?(:copy_presenter)

  form_url = work_log.persisted? ? work_log_path(work_log) : work_logs_path
  submit_label =
    if work_log.persisted?
      "Update record"
    else
      copy_presenter ? "Create copy" : "Create record"
    end

= form_for(work_log, url: form_url) do |f|
  - form_presenter = Work::Services::Logs::FormPresenter.new(form: f)
  - Rails.logger.error(self.class.ancestors - Class.ancestors)
  - if copy_presenter
    = f.hidden_field(:copy_from, value: copy_presenter.log.id)
  table style="border-collapse: collapse"
    tbody
      - if copy_presenter.nil? || copy_presenter.visible?(:worker_id)
        tr
          th = work_log.column_comments[:worker_id]
          td = form_presenter.select_worker
      - if copy_presenter.nil? || copy_presenter.visible?(:requirement_id)
        tr
          th = work_log.column_comments[:requirement_id]
          td = form_presenter.select_requirement
      - if copy_presenter.nil? || copy_presenter.visible?(:started_at)
        tr
          th = work_log.column_comments[:started_at]
          td = f.date_field(:started_at, min: Date.new(2024, 9, 1))
      - if copy_presenter.nil? || copy_presenter.visible?(:ended_at)
        tr
          th = work_log.column_comments[:ended_at]
          td = f.date_field(:ended_at, min: Date.new(2024, 9, 1))
      - if copy_presenter.nil? || copy_presenter.visible?(:kind)
        tr
          th = work_log.column_comments[:kind]
          td = form_presenter.select_kind
      - if copy_presenter.nil? || copy_presenter.visible?(:planned_duration)
        tr
          th = work_log.column_comments[:planned_duration]
          td = f.number_field(:planned_duration, min: 0, step: 0.005)
    tfoot
      tr
        td colspan="2" = f.submit(submit_label)
